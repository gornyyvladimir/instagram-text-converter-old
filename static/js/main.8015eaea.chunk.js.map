{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","textareaRef","useRef","_useState","useState","_useState2","Object","slicedToArray","text","setText","_useState3","_useState4","convertedText","setConvertedText","_useState5","_useState6","disabled","setDisabled","react_default","a","createElement","className","onChange","event","target","value","placeholder","rows","cols","type","onClick","preventDefault","replace","ref","onFocus","select","readOnly","current","document","execCommand","alert","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8015eaea.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport './App.css';\n\nfunction App() {\n  const textareaRef = useRef(null);\n  const [text, setText] = useState('');\n  const [convertedText, setConvertedText] = useState('');\n  const [disabled, setDisabled] = useState(true);\n\n  const handleTextChange = event => {\n    setText(event.target.value);\n  };\n\n  const handleCovertClick = event => {\n    event.preventDefault();\n    const convertedText = text.replace(/\\s*\\n{2,}/g, '\\n⠀\\n').replace(/\\s+\\n/g, '\\n');\n    setConvertedText(convertedText);\n    setDisabled(false);\n  };\n\n  const handleCopyClick = event => {\n    event.preventDefault();\n    textareaRef.current.select();\n    document.execCommand('copy');\n    alert(\n      'Текст скопирован! Теперь вы можете вставить текст со специальными пробелами в свой пост в Instagram!',\n    );\n  };\n\n  const handleTextareaFocus = event => {\n    event.target.select();\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">Как сделать абзац в инстаграм?</h1>\n      <p className=\"text\">\n        Этот инструмент поможет вам добавить специальный пробел в инстаграм, для того чтобы ваши\n        описания в инстаграм могли начинаться с новой строки.\n      </p>\n      <div className=\"wrapper\">\n        <form className=\"form\">\n          <textarea\n            className=\"textarea\"\n            onChange={handleTextChange}\n            value={text}\n            placeholder=\"Пожалуйста, введите текст\"\n            rows=\"5\"\n            cols=\"30\"\n          />\n          <button className=\"button\" type=\"submit\" onClick={handleCovertClick}>\n            Конвертировать\n          </button>\n        </form>\n        <form className=\"form\">\n          <textarea\n            className=\"textarea\"\n            ref={textareaRef}\n            onFocus={handleTextareaFocus}\n            value={convertedText}\n            rows=\"5\"\n            cols=\"30\"\n            readOnly\n          />\n          <button className=\"button\" type=\"submit\" onClick={handleCopyClick} disabled={disabled}>\n            Копировать\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'normalize.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}